name: Deploy to Railway (Project Token)

on:
  push:
    branches: [main, master]
  workflow_dispatch:

concurrency:
  group: railway-deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  # Project token - limited access
  RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
  RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

jobs:
  deploy:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    env:
      RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
      RAILWAY_PROJECT_ID: ${{ secrets.RAILWAY_PROJECT_ID }}

    # Only deploy on push to main/master or manual workflow dispatch
    if: ${{ github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Railway CLI
        shell: sh
        run: |
          set -eu
          echo "📦 Installing Railway CLI..."
          curl -fsSL https://railway.app/install.sh | sh
          echo "✅ Railway CLI installed"
          echo "$HOME/.railway/bin" >> $GITHUB_PATH
          export PATH="$HOME/.railway/bin:$PATH"
          railway --version

      - name: Assert RAILWAY_TOKEN and RAILWAY_PROJECT_ID present
        shell: sh
        run: |
          set -eu
          if [ -z "${RAILWAY_TOKEN:-}" ]; then
            echo "❌ RAILWAY_TOKEN is empty/unavailable"
            exit 1
          fi
          LAST4=$(printf "%s" "$RAILWAY_TOKEN" | awk '{print substr($0,length($0)-3,4)}')
          echo "✅ RAILWAY_TOKEN ends with: ****${LAST4}"
          if [ -z "${RAILWAY_PROJECT_ID:-}" ]; then
            echo "❌ RAILWAY_PROJECT_ID is empty/unavailable"
            exit 1
          fi
          echo "✅ RAILWAY_PROJECT_ID provided."

      - name: Configure backend environment
        shell: sh
        run: |
          set -eu
          echo "🔧 Setting backend environment variables..."
          railway variables -e "${RAILWAY_ENV:-production}" -s backend \
            --set "NODE_ENV=production" \
            --set "PORT=5000" \
            --set "CORS_ORIGIN=https://${{ secrets.FRONTEND_DOMAIN || 'your-frontend-domain.up.railway.app' }}"
          echo "✅ Backend environment configured"

      - name: Set PostgreSQL connection
        shell: sh
        run: |
          set -eu
          echo "🔗 Setting up database connection..."
          # Try to get DATABASE_URL from Postgres service
          for SVC in Postgres postgres PostgreSQL postgresql; do
            echo "🔎 Checking service: $SVC"
            if PGVARS="$(railway variables -e "${RAILWAY_ENV:-production}" -s "$SVC" --kv 2>/dev/null)"; then
              PG_URL="$(printf '%s\n' "$PGVARS" | awk -F= '$1=="DATABASE_URL"{print substr($0,index($0,$2))}')"
              if [ -n "${PG_URL:-}" ]; then
                echo "🔗 Found DATABASE_URL in $SVC"
                railway variables -e "${RAILWAY_ENV:-production}" -s backend --set "DATABASE_URL=$PG_URL"
                echo "✅ DATABASE_URL set for backend"
                break
              fi
            fi
          done
          
          if [ -z "${PG_URL:-}" ]; then
            echo "⚠️ Could not find DATABASE_URL from Postgres service"
            echo "💡 You may need to set DATABASE_URL manually in Railway dashboard"
          fi

      - name: Configure backend service build
        shell: sh
        run: |
          set -eu
          echo "🔧 Setting backend service configuration..."
          railway variables -s backend \
            --set "RAILWAY_DOCKERFILE_PATH=backend/Dockerfile" || true
          echo "✅ Backend service configured"

      - name: Deploy backend application
        shell: sh
        run: |
          set -eu
          echo "🚀 Deploying backend..."
          railway up --service backend
          echo "✅ Backend deployed successfully"

      - name: Get backend public domain
        shell: sh
        run: |
          set -eu
          echo "🌐 Getting backend public domain..."
          
          # Project tokens have limited access, so we'll use a different approach
          # Try to get domain from Railway API or use fallback
          
          # Method 1: Try to get from Railway API (if available)
          if [ -n "${RAILWAY_PROJECT_ID:-}" ]; then
            echo "🔍 Attempting to get domain from Railway API..."
            # This might work with project tokens
            API_RESPONSE="$(curl -s -H "Authorization: Bearer $RAILWAY_TOKEN" \
              "https://backboard.railway.app/graphql" \
              -H "Content-Type: application/json" \
              -d '{"query":"query { project(id: \"'$RAILWAY_PROJECT_ID'\") { services { name host } } }"}' 2>/dev/null || true)"
            
            if [ -n "${API_RESPONSE:-}" ]; then
              BACKEND_HOST="$(printf '%s' "$API_RESPONSE" | grep -o '"host":"[^"]*"' | head -1 | cut -d'"' -f4 || true)"
              if [ -n "${BACKEND_HOST:-}" ]; then
                URL="https://${BACKEND_HOST}"
                echo "✅ Found backend URL from API: $URL"
                {
                  echo "BACKEND_PUBLIC_URL=$URL"
                  echo "BACKEND_PUBLIC_DOMAIN=$BACKEND_HOST"
                } >> "$GITHUB_ENV"
                exit 0
              fi
            fi
          fi
          
          # Method 2: Use FRONTEND_DOMAIN secret as fallback
          if [ -n "${FRONTEND_DOMAIN:-}" ]; then
            echo "🔄 Using FRONTEND_DOMAIN secret as fallback: $FRONTEND_DOMAIN"
            {
              echo "BACKEND_PUBLIC_URL=https://$FRONTEND_DOMAIN"
              echo "BACKEND_PUBLIC_DOMAIN=$FRONTEND_DOMAIN"
            } >> "$GITHUB_ENV"
            exit 0
          fi
          
          # Method 3: Use default Railway domain pattern
          echo "🔄 Using default Railway domain pattern..."
          DEFAULT_DOMAIN="your-backend-service.up.railway.app"
          echo "⚠️ Using default domain: $DEFAULT_DOMAIN"
          echo "💡 You should set FRONTEND_DOMAIN secret with your actual backend domain"
          {
            echo "BACKEND_PUBLIC_URL=https://$DEFAULT_DOMAIN"
            echo "BACKEND_PUBLIC_DOMAIN=$DEFAULT_DOMAIN"
          } >> "$GITHUB_ENV"

      - name: Configure frontend environment
        shell: sh
        run: |
          set -eu
          if [ -z "${BACKEND_PUBLIC_DOMAIN:-}" ]; then
            echo "❌ BACKEND_PUBLIC_DOMAIN is empty"
            exit 1
          fi
          API_URL="https://${BACKEND_PUBLIC_DOMAIN}"
          echo "🔧 Setting frontend environment variables..."
          railway variables -e "${RAILWAY_ENV:-production}" -s frontend \
            --set "REACT_APP_API_URL=$API_URL" \
            --set "NODE_ENV=production"
          echo "✅ Frontend environment configured: $API_URL"

      - name: Configure frontend service build
        shell: sh
        run: |
          set -eu
          echo "🔧 Setting frontend service configuration..."
          railway variables -s frontend \
            --set "RAILWAY_DOCKERFILE_PATH=frontend/Dockerfile" || true
          echo "✅ Frontend service configured"

      - name: Deploy Frontend Application
        shell: sh
        run: |
          set -eu
          echo "🚀 Deploying frontend..."
          railway up --service frontend
          echo "✅ Frontend deployed successfully"

      - name: Check deployment status
        shell: sh
        run: |
          echo "📊 Checking deployment status..."
          echo "✅ Backend and frontend deployment commands completed"
          echo "💡 Check your Railway dashboard for deployment status"
          echo "🌐 Your services should be available at:"
          echo "   - Backend: ${{ env.BACKEND_PUBLIC_URL || 'Check Railway dashboard' }}"
          echo "   - Frontend: Check Railway dashboard for frontend URL"
